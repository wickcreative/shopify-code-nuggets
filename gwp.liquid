{% if settings.gwpon %}
{%- assign productbuy = all_products[settings.gwpbuy_product] -%}
{%- assign productget = all_products[settings.gwpget_product] -%}
	{% assign gwpcomplete = false %}
	{% assign gwpstarted = false %}
	{% assign gwpget = false %}
	{% assign gwpbuy = false %}
	{% for item in cart.items %}
		{%for tag in item.product.tags %}
			{% if tag == "GWP-BUY" %}
				{% assign gwpbuy = true %}
			{%endif %}
			{% if tag == "GWP-GET" %}
				{% assign gwpget = true %}
			{%endif %}
		{%endfor%}
	{%endfor%}

	{% if gwpbuy %}
		{% if gwpget %}
			{% assign gwpcomplete = true %}
			{% assign gwpstarted = true %}
		{%else%}
			{% assign gwpstarted = true %}
		{%endif%}
    {% else %}
		{% assign gwpstarted = false %}
	{%endif%}


{% comment %}
	STEP 1 - nothing added to cart or not the qualifying item
{% endcomment %}

	{%if gwpstarted == false and gwpcomplete == false %}
		<div class="gwpbar" style="background-color:{{settings.gwp1color}}; color:{{settings.gwp1colortext}};">
          {{settings.gwpoffer}} <a href="{{productbuy.url}}" style="margin-left:20px;padding:5px 20px; background-color:{{settings.gwpbutton}};" class="btn">Shop Now</a>
		</div>
	{%endif%}


{% comment %}
	STEP 2 - auto add the free item 
{% endcomment %}

	{%if gwpstarted == true and gwpcomplete == false %}
		<script>
          	$( document ).ready(function() {
                $.ajax({
                    type: 'POST',
                    url: '/cart/add.js',
                    data: {
                        "id": {{productget.selected_or_first_available_variant.id}},
                        "quantity": 1
                    },
                    dataType: 'json',
                    success: function() { 
                        window.location.href = '/cart'; 
                    }
                });   
			});   
		</script>
	{%endif%}


{% comment %}
	STEP 3 - offer complete
{% endcomment %}

	{%if gwpstarted == true and gwpcomplete == true %}
		<div class="gwpbar" style="background-color:{{settings.gwp2color}}; color:{{settings.gwp2colortext}};">
          {{settings.gwpoffer2}}
		</div>
	{%endif%}


<style>
  .gwpbar {width:100%; text-align:center; padding:10px 0;}
</style>

{%endif%}





{%comment%}
ADD THESE TO THEME SETTINGS

  {
    "name": "Gift With Purchase",
    "settings": [
      {
        "type": "paragraph",
        "content": "Step 1. Tag the Offer Activating Product with GWP-BUY, \r Step 2. Tag the Gift product with GWP-GET Step 3. fill out these fields. Step 4. activate"
      },
      {
        "type": "checkbox",
        "id": "gwpon",
        "label": "Turn on the Gift With Purchase?",
        "default": false
      },
      {
        "type": "header",
        "content": "Offer Items"
      },      
      {
        "type": "text",
        "id": "gwpoffer",
        "label": "GWP Message - No Items",
        "info": "this will be before they have activate the offer, so promote it"
      },
      {
        "type": "color",
        "id": "gwp1color",
        "label": "Bar color, during this message",
        "default": "#b4afb8"
      },
      {
        "type": "color",
        "id": "gwp1colortext",
        "label": "Text color, during this message",
        "default": "#fff"
      },
      {
        "type": "color",
        "id": "gwpbutton",
        "label": "Bar color, during this message",
        "default": "#000"
      },      
      {
        "type": "product",
        "id": "gwpbuy_product",
        "label": "Product You Have to Buy"
      },
      {
        "type": "header",
        "content": "Success Items"
      },      
      {
        "type": "text",
        "id": "gwpoffer2",
        "label": "GWP Message - Item Added - Success",
        "info": "this will be on success with free item added"
      },
      {
        "type": "color",
        "id": "gwp2color",
        "label": "Bar color, during this message",
        "default": "#81a9a9"
      },
      {
        "type": "color",
        "id": "gwp2colortext",
        "label": "Text color, during this message",
        "default": "#fff"
      },
      {
        "type": "product",
        "id": "gwpget_product",
        "label": "Product You Get For Free"
      }
    ]
  },  




ADD THIS TO LINE ITEM SCRIPTS

class Campaign
  def initialize(condition, *qualifiers)
    @condition = (condition.to_s + '?').to_sym
    @qualifiers = PostCartAmountQualifier ? [] : [] rescue qualifiers.compact
    @line_item_selector = qualifiers.last unless @line_item_selector
    qualifiers.compact.each do |qualifier|
      is_multi_select = qualifier.instance_variable_get(:@conditions).is_a?(Array)
      if is_multi_select
        qualifier.instance_variable_get(:@conditions).each do |nested_q|
          @post_amount_qualifier = nested_q if nested_q.is_a?(PostCartAmountQualifier)
          @qualifiers << qualifier
        end
      else
        @post_amount_qualifier = qualifier if qualifier.is_a?(PostCartAmountQualifier)
        @qualifiers << qualifier
      end
    end if @qualifiers.empty?
  end

  def qualifies?(cart)
    return true if @qualifiers.empty?
    @unmodified_line_items = cart.line_items.map do |item|
      new_item = item.dup
      new_item.instance_variables.each do |var|
        val = item.instance_variable_get(var)
        new_item.instance_variable_set(var, val.dup) if val.respond_to?(:dup)
      end
      new_item
    end if @post_amount_qualifier
    @qualifiers.send(@condition) do |qualifier|
      is_selector = false
      if qualifier.is_a?(Selector) || qualifier.instance_variable_get(:@conditions).any? { |q| q.is_a?(Selector) }
        is_selector = true
      end rescue nil
      if is_selector
        raise "Missing line item match type" if @li_match_type.nil?
        cart.line_items.send(@li_match_type) { |item| qualifier.match?(item) }
      else
        qualifier.match?(cart, @line_item_selector)
      end
    end
  end

  def run_with_hooks(cart)
    before_run(cart) if respond_to?(:before_run)
    run(cart)
    after_run(cart)
  end

  def after_run(cart)
    @discount.apply_final_discount if @discount && @discount.respond_to?(:apply_final_discount)
    revert_changes(cart) unless @post_amount_qualifier.nil? || @post_amount_qualifier.match?(cart)
  end

  def revert_changes(cart)
    cart.instance_variable_set(:@line_items, @unmodified_line_items)
  end
end

class ConditionalDiscount < Campaign
  def initialize(condition, customer_qualifier, cart_qualifier, line_item_selector, discount, max_discounts)
    super(condition, customer_qualifier, cart_qualifier)
    @line_item_selector = line_item_selector
    @discount = discount
    @items_to_discount = max_discounts == 0 ? nil : max_discounts
  end

  def run(cart)
    raise "Campaign requires a discount" unless @discount
    return unless qualifies?(cart)
    applicable_items = cart.line_items.select { |item| @line_item_selector.nil? || @line_item_selector.match?(item) }
    applicable_items = applicable_items.sort_by { |item| item.variant.price }
    applicable_items.each do |item|
      break if @items_to_discount == 0
      if (!@items_to_discount.nil? && item.quantity > @items_to_discount)
        discounted_items = item.split(take: @items_to_discount)
        @discount.apply(discounted_items)
        cart.line_items << discounted_items
        @items_to_discount = 0
      else
        @discount.apply(item)
        @items_to_discount -= item.quantity if !@items_to_discount.nil?
      end
    end
  end
end

class Qualifier
  def partial_match(match_type, item_info, possible_matches)
    match_type = (match_type.to_s + '?').to_sym
    if item_info.kind_of?(Array)
      possible_matches.any? do |possibility|
        item_info.any? do |search|
          search.send(match_type, possibility)
        end
      end
    else
      possible_matches.any? do |possibility|
        item_info.send(match_type, possibility)
      end
    end
  end

  def compare_amounts(compare, comparison_type, compare_to)
    case comparison_type
      when :greater_than
        return compare > compare_to
      when :greater_than_or_equal
        return compare >= compare_to
      when :less_than
        return compare < compare_to
      when :less_than_or_equal
        return compare <= compare_to
      when :equal_to
        return compare == compare_to
      else
        raise "Invalid comparison type"
    end
  end
end

class CartHasItemQualifier < Qualifier
  def initialize(quantity_or_subtotal, comparison_type, amount, item_selector)
    @quantity_or_subtotal = quantity_or_subtotal
    @comparison_type = comparison_type
    @amount = quantity_or_subtotal == :subtotal ? Money.new(cents: amount * 100) : amount
    @item_selector = item_selector
  end

  def match?(cart, selector = nil)
    raise "Must supply an item selector for the #{self.class}" if @item_selector.nil?
    case @quantity_or_subtotal
      when :quantity
        total = cart.line_items.reduce(0) do |total, item|
          total + (@item_selector&.match?(item) ? item.quantity : 0)
        end
      when :subtotal
        total = cart.line_items.reduce(Money.zero) do |total, item|
          total + (@item_selector&.match?(item) ? item.line_price : Money.zero)
        end
    end
    compare_amounts(total, @comparison_type, @amount)
  end
end

class Selector
  def partial_match(match_type, item_info, possible_matches)
    match_type = (match_type.to_s + '?').to_sym
    if item_info.kind_of?(Array)
      possible_matches.any? do |possibility|
        item_info.any? do |search|
          search.send(match_type, possibility)
        end
      end
    else
      possible_matches.any? do |possibility|
        item_info.send(match_type, possibility)
      end
    end
  end
end

class ProductTagSelector < Selector
  def initialize(match_type, match_condition, tags)
    @match_condition = match_condition
    @invert = match_type == :does_not
    @tags = tags.map(&:downcase)
  end

  def match?(line_item)
    product_tags = line_item.variant.product.tags.to_a.map(&:downcase)
    case @match_condition
      when :match
        return @invert ^ ((@tags & product_tags).length > 0)
      else
        return @invert ^ partial_match(@match_condition, product_tags, @tags)
    end
  end
end

class PercentageDiscount
  def initialize(percent, message)
    @discount = (100 - percent) / 100.0
    @message = message
  end

  def apply(line_item)
    line_item.change_line_price(line_item.line_price * @discount, message: @message)
  end
end

CAMPAIGNS = [
  ConditionalDiscount.new(
    :all,
    nil,
    CartHasItemQualifier.new(
      :quantity,
      :greater_than,
      0,
      ProductTagSelector.new(
        :does,
        :match,
        ["GWP-BUY"]
      )
    ),
    ProductTagSelector.new(
      :does,
      :match,
      ["GWP-GET"]
    ),
    PercentageDiscount.new(
      100,
      "Gift With Purchase!"
    ),
    1
  )
].freeze

CAMPAIGNS.each do |campaign|
  campaign.run_with_hooks(Input.cart)
end

Output.cart = Input.cart







IF THE PRODUCT TEMPLATE HAS AN AJAX CART YOU MIGHT NEED TO ADD THIS


      $.ajax({
        type: 'POST',
        url: '/cart/add.js',
        dataType: 'json',
        data: $(this).serialize(),
        success: function(response){
                  {% if product.tags contains "GWP-BUY" %}
            {% for item in cart.items %}
                {%for tag in item.product.tags %}
                    {% if tag == "GWP-GET" %}
                        {% assign gwpget = true %}
                    {%endif %}
                {%endfor%}
            {%endfor%}
        {% unless gwpget %}
        {%- assign productget = all_products[settings.gwpget_product] -%}
                $.ajax({
                    type: 'POST',
                    url: '/cart/add.js',
                    data: {
                        "id": {{productget.selected_or_first_available_variant.id}},
                        "quantity": 1
                        },
                    dataType: 'json',
                    success: function(response) {
                                $.ajax({
            type: 'GET',
            url: '/cart.js',
            dataType: 'json',
            success: function(cartdata){
              {%- assign before_success = settings.cartside_freeship_message | split: '$' -%}
              var cartLimit = {{ settings.cartside_freeship_limit }}*100;
              var remainingAmount = cartLimit - cartdata.total_price;
              var textBefore = '{{ before_success[0] }} '+Shopify.formatMoney(remainingAmount)+' {{ before_success[1] }}';
              var textAfter = '{{ settings.cartside_freeship_success }}';
              if(cartdata.item_count > 0) {
                $('.cart-sidebar--footer').removeClass('d-none');
              if(remainingAmount > 0) {
                $('.info-shipping').text(textBefore);
              } else {
                $('.info-shipping').text(textAfter);
              }
              } else {
                  $('.cart-sidebar--footer').addClass('d-none');
                  $('.info-shipping').text(textBefore);
              }
              if(!$('.site-header__cart-count').length) {
                $('.site-header__cart').append('<div class="site-header__cart-count"><span></span><span class="icon__fallback-text hidden-md-up">{{ 'layout.cart.items_count' | t: count: cart.item_count }}</span></div>');
              }
              $('.site-header__cart-count').each(function(){
                $(this).find('span').first().text(cartdata.item_count);
              });
              $('.cart-sidebar').removeClass('hide');
              $('.cart-black-overlay').show();
              {% if settings.cartdropdown %}
                // Handlebars.js bralette layout
                var sourceSiebar = $("#CartTemplateSidebar").html(),
                    templateSidebar = Handlebars.compile(sourceSiebar);
                var allItems = cartdata.items,
                    items = [],
                    item = {};
                // Add each item to our handlebars.js data
                $.each(allItems, function(index,varItem) {
                  console.log(allItems);
                  var imageSmall = Shopify.resizeImage(varItem.image,'small');
                  item = {
                    id: varItem.id,
                    title: varItem.product_title,
                    variant: varItem.variant_title,
                    url: varItem.url,
                    price: Shopify.formatMoney(varItem.discounted_price, '${% raw %}{{amount}}{% endraw %}'),
                    quantity: varItem.quantity,
                    image: imageSmall
                  };
                  items.push(item);
                });
                // Gather all  data and add to DOM
                data = {
                  total: Shopify.formatMoney(cartdata.total_price, '${% raw %}{{amount}}{% endraw %}'),
                  variants: items
                }
                $('.cart-sidebar--items-wrpaper').html(templateSidebar(data));
                $('.site-header__cart+strong').html(data.total.replace(/((\,00)|(\.00))$/g, ''));
                $('.cart-subtotals').text(Shopify.formatMoney(cartdata.total_price).replace(/((\,00)|(\.00))$/g, ''));
              $('.cart-prod-qty').each(function(){
                $(this).val($(this).data('cartval'));
              })
              {% endif %}
            },
            error: function(data){
              console.log(data);
            }
          });
        },
        error: function(data){
          alert('Something went wrong! Please refresh the page and try again');
        }
      });
                    }
                });
          {%else%}
                    $.ajax({
            type: 'GET',
            url: '/cart.js',
            dataType: 'json',
            success: function(cartdata){
              {%- assign before_success = settings.cartside_freeship_message | split: '$' -%}
              var cartLimit = {{ settings.cartside_freeship_limit }}*100;
              var remainingAmount = cartLimit - cartdata.total_price;
              var textBefore = '{{ before_success[0] }} '+Shopify.formatMoney(remainingAmount)+' {{ before_success[1] }}';
              var textAfter = '{{ settings.cartside_freeship_success }}';
              if(cartdata.item_count > 0) {
                $('.cart-sidebar--footer').removeClass('d-none');
              if(remainingAmount > 0) {
                $('.info-shipping').text(textBefore);
              } else {
                $('.info-shipping').text(textAfter);
              }
              } else {
                  $('.cart-sidebar--footer').addClass('d-none');
                  $('.info-shipping').text(textBefore);
              }
              if(!$('.site-header__cart-count').length) {
                $('.site-header__cart').append('<div class="site-header__cart-count"><span></span><span class="icon__fallback-text hidden-md-up">{{ 'layout.cart.items_count' | t: count: cart.item_count }}</span></div>');
              }
              $('.site-header__cart-count').each(function(){
                $(this).find('span').first().text(cartdata.item_count);
              });
              $('.cart-sidebar').removeClass('hide');
              $('.cart-black-overlay').show();
              {% if settings.cartdropdown %}
                // Handlebars.js bralette layout
                var sourceSiebar = $("#CartTemplateSidebar").html(),
                    templateSidebar = Handlebars.compile(sourceSiebar);
                var allItems = cartdata.items,
                    items = [],
                    item = {};
                // Add each item to our handlebars.js data
                $.each(allItems, function(index,varItem) {
                  var imageSmall = Shopify.resizeImage(varItem.image,'small');
                  item = {
                    id: varItem.id,
                    title: varItem.product_title,
                    variant: varItem.variant_title,
                    url: varItem.url,
                    price: Shopify.formatMoney(varItem.discounted_price, '${% raw %}{{amount}}{% endraw %}'),
                    quantity: varItem.quantity,
                    image: imageSmall
                  };
                  items.push(item);
                });
                // Gather all  data and add to DOM
                data = {
                  total: Shopify.formatMoney(cartdata.total_price, '${% raw %}{{amount}}{% endraw %}'),
                  variants: items
                }
                $('.cart-sidebar--items-wrpaper').html(templateSidebar(data));
                $('.site-header__cart+strong').html(data.total.replace(/((\,00)|(\.00))$/g, ''));
                $('.cart-subtotals').text(Shopify.formatMoney(cartdata.total_price).replace(/((\,00)|(\.00))$/g, ''));
              $('.cart-prod-qty').each(function(){
                $(this).val($(this).data('cartval'));
              })
              {% endif %}
            },
            error: function(data){
              console.log(data);
            }
          });
        },
        error: function(data){
          alert('Something went wrong! Please refresh the page and try again');
        }
      });
        {%endunless%}
          {%else%}
                    $.ajax({
            type: 'GET',
            url: '/cart.js',
            dataType: 'json',
            success: function(cartdata){
              {%- assign before_success = settings.cartside_freeship_message | split: '$' -%}
              var cartLimit = {{ settings.cartside_freeship_limit }}*100;
              var remainingAmount = cartLimit - cartdata.total_price;
              var textBefore = '{{ before_success[0] }} '+Shopify.formatMoney(remainingAmount)+' {{ before_success[1] }}';
              var textAfter = '{{ settings.cartside_freeship_success }}';
              if(cartdata.item_count > 0) {
                $('.cart-sidebar--footer').removeClass('d-none');
              if(remainingAmount > 0) {
                $('.info-shipping').text(textBefore);
              } else {
                $('.info-shipping').text(textAfter);
              }
              } else {
                  $('.cart-sidebar--footer').addClass('d-none');
                  $('.info-shipping').text(textBefore);
              }
              if(!$('.site-header__cart-count').length) {
                $('.site-header__cart').append('<div class="site-header__cart-count"><span></span><span class="icon__fallback-text hidden-md-up">{{ 'layout.cart.items_count' | t: count: cart.item_count }}</span></div>');
              }
              $('.site-header__cart-count').each(function(){
                $(this).find('span').first().text(cartdata.item_count);
              });
              $('.cart-sidebar').removeClass('hide');
              $('.cart-black-overlay').show();
              {% if settings.cartdropdown %}
                // Handlebars.js bralette layout
                var sourceSiebar = $("#CartTemplateSidebar").html(),
                    templateSidebar = Handlebars.compile(sourceSiebar);
                var allItems = cartdata.items,
                    items = [],
                    item = {};
                // Add each item to our handlebars.js data
                $.each(allItems, function(index,varItem) {
                  var imageSmall = Shopify.resizeImage(varItem.image,'small');
                  item = {
                    id: varItem.id,
                    title: varItem.product_title,
                    variant: varItem.variant_title,
                    url: varItem.url,
                    price: Shopify.formatMoney(varItem.discounted_price, '${% raw %}{{amount}}{% endraw %}'),
                    quantity: varItem.quantity,
                    image: imageSmall
                  };
                  items.push(item);
                });
                // Gather all  data and add to DOM
                data = {
                  total: Shopify.formatMoney(cartdata.total_price, '${% raw %}{{amount}}{% endraw %}'),
                  variants: items
                }
                $('.cart-sidebar--items-wrpaper').html(templateSidebar(data));
                $('.site-header__cart+strong').html(data.total.replace(/((\,00)|(\.00))$/g, ''));
                $('.cart-subtotals').text(Shopify.formatMoney(cartdata.total_price).replace(/((\,00)|(\.00))$/g, ''));
              $('.cart-prod-qty').each(function(){
                $(this).val($(this).data('cartval'));
              })
              {% endif %}
            },
            error: function(data){
              console.log(data);
            }
          });
        },
        error: function(data){
          alert('Something went wrong! Please refresh the page and try again');
        }
      });
        {%endif%}
      // console.log($(this).serializeArray())
      // Shopify.addItem();
    });
{%endcomment %}
